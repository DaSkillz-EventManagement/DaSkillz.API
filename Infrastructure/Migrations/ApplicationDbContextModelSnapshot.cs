// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CouponEvent", b =>
                {
                    b.Property<string>("CouponsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CouponsId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("CouponEvent");
                });

            modelBuilder.Entity("CouponUser", b =>
                {
                    b.Property<string>("CouponsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CouponsId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("CouponUser");
                });

            modelBuilder.Entity("Domain.Entities.AdvertisedEvent", b =>
                {
                    b.Property<Guid>("PurchaserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PurchasedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.HasKey("PurchaserId", "EventId");

                    b.ToTable("AdvertisedEvents");
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerLabel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Coupon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CreatedDate")
                        .HasColumnType("bigint");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Type of discount: 'Money' or 'Percent'");

                    b.Property<long>("ExpiredDate")
                        .HasColumnType("bigint");

                    b.Property<int>("NOAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Number of attempts allowed for the coupon");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount value, depends on DiscountType (money or percentage)");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertisedEventEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertisedEventPurchaserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approval")
                        .HasColumnType("bit");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedByNavigationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("Fare")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<string>("Image")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LocationCoord")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LocationId")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("LocationID");

                    b.Property<string>("LocationUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Theme")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByNavigationUserId");

                    b.HasIndex("AdvertisedEventPurchaserId", "AdvertisedEventEventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId")
                        .HasName("PK__Feedback__001C802BACDA8C5B");

                    b.HasIndex("EventId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Logo", b =>
                {
                    b.Property<int>("LogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogoId"));

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SponsorBrand")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("LogoId");

                    b.ToTable("Logo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<DateTime?>("CheckedIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsCheckedMail")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleEventId")
                        .HasColumnType("int")
                        .HasColumnName("RoleEventID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("RoleEventId");

                    b.ToTable("Participant", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PriceId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswerLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMultipleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuestionAnswered")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowAnswerAfterChoosing")
                        .HasColumnType("bit");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuizDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("eventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuizId");

                    b.HasIndex("UserId");

                    b.HasIndex("eventId");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefreshTokenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefundTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Apptransid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("refundAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("refundAt")
                        .HasColumnType("datetime");

                    b.Property<long>("refundId")
                        .HasMaxLength(100)
                        .HasColumnType("bigint");

                    b.Property<int>("returnCode")
                        .HasColumnType("int");

                    b.Property<string>("returnMessage")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("Apptransid")
                        .IsUnique()
                        .HasFilter("[Apptransid] IS NOT NULL");

                    b.ToTable("RefundTransactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RoleEvent", b =>
                {
                    b.Property<int>("RoleEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleEventID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleEventId"));

                    b.Property<string>("RoleEventName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleEventId");

                    b.ToTable("RoleEvent", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SponsorEvent", b =>
                {
                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsSponsored")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SponsorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SponsorEvent", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TagId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Apptransid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSubscription")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zptransid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Apptransid");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAnswer", b =>
                {
                    b.Property<Guid>("UserAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerLabel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswer", (string)null);
                });

            modelBuilder.Entity("EventLogo", b =>
                {
                    b.Property<int>("LogoId")
                        .HasColumnType("int")
                        .HasColumnName("LogoID");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.HasKey("LogoId", "EventId")
                        .HasName("PK__EventLog__D1B4592A90BF4813");

                    b.HasIndex("EventId");

                    b.ToTable("EventLogo", (string)null);
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventID");

                    b.HasKey("TagId", "EventId")
                        .HasName("PK__EventTag__72E8B6CB39612262");

                    b.HasIndex("EventId");

                    b.ToTable("EventTag", (string)null);
                });

            modelBuilder.Entity("CouponEvent", b =>
                {
                    b.HasOne("Domain.Entities.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CouponUser", b =>
                {
                    b.HasOne("Domain.Entities.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Answer_Question_111022");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("Events")
                        .HasForeignKey("CreatedByNavigationUserId");

                    b.HasOne("Domain.Entities.AdvertisedEvent", "AdvertisedEvent")
                        .WithMany("Events")
                        .HasForeignKey("AdvertisedEventPurchaserId", "AdvertisedEventEventId");

                    b.Navigation("AdvertisedEvent");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("Feedbacks")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__EventI__4E88ABD4");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__UserID__4D94879B");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.RoleEvent", "RoleEvent")
                        .WithMany("Participants")
                        .HasForeignKey("RoleEventId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("RoleEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Price", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany("Question")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Quiz_Questions");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("Quizs")
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__RefreshTo__UserI__5535A963");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RefundTransaction", b =>
                {
                    b.HasOne("Domain.Entities.Transaction", "Transaction")
                        .WithOne("RefundTransaction")
                        .HasForeignKey("Domain.Entities.RefundTransaction", "Apptransid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_RefundTransaction_Transaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Domain.Entities.SponsorEvent", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SponsorEv__Event__5FB337D6");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SponsorEv__UserI__60A75C0F");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("Domain.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subscription_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("Transactions")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Transaction_Event");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Transaction_User");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleID__398D8EEE");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserAnswer", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventLogo", b =>
                {
                    b.HasOne("Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__EventLogo__Event__5CD6CB2B");

                    b.HasOne("Domain.Entities.Logo", null)
                        .WithMany()
                        .HasForeignKey("LogoId")
                        .IsRequired()
                        .HasConstraintName("FK__EventLogo__LogoI__5DCAEF64");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__EventTag__EventI__4316F928");

                    b.HasOne("Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK__EventTag__TagID__440B1D61");
                });

            modelBuilder.Entity("Domain.Entities.AdvertisedEvent", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Participants");

                    b.Navigation("Quizs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.RoleEvent", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Navigation("RefundTransaction");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Feedbacks");

                    b.Navigation("Participants");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Subscription");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
